#version 450
//#extension GL_ARB_seperate_shader_objects : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct InfoBuffer
{
    uint uWidth;
    uint uHeight;
    float fEvaporationRate;
    float fDepositionRate;
    float fSoftness;
    float fRainCoeff;
    float fWaterLevel;
    uint bClearTerrain;
};

struct FHydFloatCombiner
{
    float values[8];
};

layout(std430, binding = 0) buffer hbuf
{
    float heightMap[];
};

layout(std430, binding = 1) readonly buffer tbuf
{
    float terrainMap[];
};

layout(std430, binding = 2) buffer wbuf
{
    FHydFloatCombiner waterMap[];
};

layout(std430, binding = 3) buffer sbuf
{
    FHydFloatCombiner sedimentMap[];
};

layout(std430, binding = 4) buffer waterlv
{
   float waterLevel[];
};

layout(std430, binding = 5) buffer sedlv
{
   float sedimentLevel[];
};

layout(std430, binding = 6) buffer delaywaterlv
{
   float delayedWaterLevel[];
};

layout(std430, binding = 7) buffer delaysedlv
{
   float delayedSedimentLevel[];
};

layout(std430, binding = 8) readonly buffer info
{
   InfoBuffer shaderInfo;
};

/**
 * Last Pass
 */
void main()
{
    if(gl_GlobalInvocationID.x >= shaderInfo.uWidth || gl_GlobalInvocationID.y >= shaderInfo.uHeight)
    {
        return;
    }

    uint gIdx = gl_GlobalInvocationID.y * shaderInfo.uWidth + gl_GlobalInvocationID.x;

    heightMap[gIdx] = heightMap[gIdx] + sedimentLevel[gIdx];
}
