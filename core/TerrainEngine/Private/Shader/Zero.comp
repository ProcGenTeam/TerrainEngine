#version 450
//#extension GL_ARB_seperate_shader_objects : enable
#extension GL_EXT_control_flow_attributes : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct InfoBuffer
{
    uint uWidth;
    uint uHeight;
    float fEvaporationRate;
    float fDepositionRate;
    float fSoilSoftness;
    float fRainCoeff;
    float fSedimentCapacity;
    float fWaterLevel;
    uint bClearTerrain;
};

struct FHydFloatCombiner
{
    float values[8];
};

layout(std430, binding = 0) readonly buffer hbuf
{
    float heightMap[];
};

layout(std430, binding = 1) buffer tbuf
{
    float terrainMap[];
};

layout(std430, binding = 2) writeonly buffer wbuf
{
    FHydFloatCombiner waterMap[];
};

layout(std430, binding = 3) writeonly buffer sbuf
{
    FHydFloatCombiner sedimentMap[];
};

layout(std430, binding = 4) writeonly buffer waterlv
{
   float waterLevel[];
};

layout(std430, binding = 5) writeonly buffer sedlv
{
   float sedimentLevel[];
};

layout(std430, binding = 6) writeonly buffer delaywaterlv
{
   float delayedWaterLevel[];
};

layout(std430, binding = 7) writeonly buffer delaysedlv
{
   float delayedSedimentLevel[];
};

layout(std430, binding = 8) readonly buffer info
{
   InfoBuffer shaderInfo;
};


/**
 * First Pass
 */
void main()
{
    if(gl_GlobalInvocationID.x >= shaderInfo.uWidth || gl_GlobalInvocationID.y >= shaderInfo.uHeight)
    {
        return;
    }

    uint gIdx = gl_GlobalInvocationID.y * shaderInfo.uWidth + gl_GlobalInvocationID.x;

    waterLevel[gIdx] = 0;
    sedimentLevel[gIdx] = 0;
    delayedWaterLevel[gIdx] = 0;
    delayedSedimentLevel[gIdx] = 0;

    terrainMap[gIdx] = shaderInfo.bClearTerrain == 1 ? shaderInfo.fSoilSoftness : terrainMap[gIdx];

    [[unroll]]
    for(uint n = 0; n < 8; ++n)
    {
        waterMap[gIdx].values[n] = 0;
        sedimentMap[gIdx].values[n] = 0;
    }

    
    
}