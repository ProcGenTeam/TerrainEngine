#version 450
//#extension GL_ARB_seperate_shader_objects : enable
#extension GL_EXT_control_flow_attributes : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct InfoBuffer
{
    uint uWidth;
    uint uHeight;
    float fEvaporationRate;
    float fDepositionRate;
    float fSoilSoftness;
    float fRainCoeff;
    float fSedimentCapacity;
    float fWaterLevel;
};

struct FHydFloatCombiner
{
    float values[8];
};

layout(std430, binding = 0) buffer hbuf
{
    float heightMap[];
};

layout(std430, binding = 1) buffer wbuf
{
    FHydFloatCombiner waterMap[];
};

layout(std430, binding = 2) buffer sbuf
{
    FHydFloatCombiner sedimentMap[];
};

layout(std430, binding = 3) buffer waterlv
{
   float waterLevel[];
};

layout(std430, binding = 4) buffer sedlv
{
   float sedimentLevel[];
};

layout(std430, binding = 5) buffer delaywaterlv
{
   float delayedWaterLevel[];
};

layout(std430, binding = 6) buffer delaysedlv
{
   float delayedSedimentLevel[];
};

layout(std430, binding = 7) readonly buffer info
{
   InfoBuffer shaderInfo;
};


/**
 * Second Pass
 */
void main()
{
    if(gl_GlobalInvocationID.x >= shaderInfo.uWidth || gl_GlobalInvocationID.y >= shaderInfo.uHeight)
    {
        return;
    }

    uint gIdx = gl_GlobalInvocationID.y * shaderInfo.uWidth + gl_GlobalInvocationID.x;
    //uint gIdx = gl_GlobalInvocationID.x;

    uint y = gl_GlobalInvocationID.y;
    uint x = gl_GlobalInvocationID.x;
    int index = 0;
    int yMod = 0;
    int xMod = 0;
    int yReal = 0;
    int xReal = 0;

    //heightMap[gIdx] = delayedWaterLevel[gIdx] < 0 ? 0 : 0.2;//1 - heightMap[gIdx];
    waterLevel[gIdx] -= delayedWaterLevel[gIdx];
    sedimentLevel[gIdx] -= delayedSedimentLevel[gIdx];

    [[unroll]]
    for(int sp = 0; sp < 8; ++sp)
    {
        waterLevel[gIdx].x += waterMap[gIdx].values[sp];
        
        // Also add the water we gain
        delayedWaterLevel[gIdx] -= waterMap[gIdx].values[sp];

        // Sediment
        // Total Sediment Moved is water * fillLevel
        sedimentLevel[gIdx] += sedimentMap[gIdx].values[sp];

        waterMap[gIdx].values[sp] = 0;
        sedimentMap[gIdx].values[sp] = 0;
    }

    // Disable Sediment Pickup
    delayedWaterLevel[gIdx] *= shaderInfo.fWaterLevel > heightMap[gIdx] ? 0.f : 1.f;

    // Deposit!
    heightMap[gIdx] += shaderInfo.fDepositionRate * sedimentLevel[gIdx];
    sedimentLevel[gIdx] -= shaderInfo.fDepositionRate * sedimentLevel[gIdx];

    // Evaporation!
    float evaporationLevel = shaderInfo.fEvaporationRate * waterLevel[gIdx];
    waterLevel[gIdx] -= evaporationLevel;

    if(waterLevel[gIdx] < 0.00000625f) { waterLevel[gIdx] = 0; }
    waterLevel[gIdx] = max(waterLevel[gIdx], 0.f);
    sedimentLevel[gIdx] = max(sedimentLevel[gIdx], 0.f);

    float sedCapacity = shaderInfo.fSedimentCapacity * waterLevel[gIdx];

    float sedimentMoving = (abs(delayedWaterLevel[gIdx]) >= 0.000000125f) ? shaderInfo.fSoilSoftness * (1.f - pow(heightMap[gIdx],2)) * (sedCapacity - sedimentLevel[gIdx]) : 0;
    sedimentMoving = sedimentLevel[gIdx] >= sedCapacity ? shaderInfo.fDepositionRate * (sedimentLevel[gIdx] - sedCapacity) * -1.f : sedimentMoving;

    float waterDelta = (shaderInfo.fWaterLevel - (waterLevel[gIdx] + heightMap[gIdx]));
    waterLevel[gIdx] += waterDelta < 0 ? 0 : waterDelta;

    sedimentLevel[gIdx] += sedimentMoving;
    heightMap[gIdx] -= sedimentMoving;

    // if(sedimentLevel[gIdx] >= sedCapacity)
    // {
    //     // Deposit everything that is over cap
    //     float ssedCapacity = shaderInfo.fDepositionRate * (sedimentLevel[gIdx] - sedCapacity);
    //     heightMap[gIdx] += ssedCapacity;
    //     sedimentLevel[gIdx] -= ssedCapacity;
    // }
    // // If we aren't over the limit, are we under it?
    // else if(abs(delayedWaterLevel[gIdx]) >= 0.000000125f)
    // {
    //     // Pick up the sediment
    //     //float rngMod = 1 - 0.1 * (double(uint64_t(6364136223846793005 * GetWorldXYS(x, uWidth, s) + 1442695040888963407)) / double(UINT64_MAX));

    //     //printf("%f\n", rngMod);

    //     float ssedCapacity = shaderInfo.fSoilSoftness * (1.f - pow(heightMap[gIdx],2)) * (sedCapacity - sedimentLevel[gIdx]);// * rngMod;
    //     //deltaS = std::max(0.001f, sedCapacity);
    //     sedimentLevel[gIdx] += ssedCapacity;
    //     heightMap[gIdx] -= ssedCapacity;
    // }

    // Reset the delayed amount
    delayedWaterLevel[gIdx] = 0;
    delayedSedimentLevel[gIdx] = 0;
}



/**
auto stack = m_vstWaterCombiner[x].values;
auto sedStack = m_vstSedimentCombiner[x].values;

// Handle delayed subtraction of water level and sediment
// .z is Cs
// StV is stuff leaving AKA Sediment Lost
//auto sedimentLost = m_vv4WaterMap[x].z * (m_vv4WaterMap[x].y / m_vv4WaterMap[x].x);
m_vv4WaterMap[x].x -= m_vv4WaterMap[x].z / m_fWorldVerticalScale;
m_vv4WaterMap[x].y -= m_vv4WaterMap[x].w;

if (m_vv4WaterMap[x].y < -0.0001) {printf("WARN: Sed < 0: %f\n", m_vv4WaterMap[x].y);}

for(uint32_t sp = 0; sp < 8; ++sp)
{
    m_vv4WaterMap[x].x += stack[sp] / m_fWorldVerticalScale;
    
    // Also add the water we gain
    m_vv4WaterMap[x].z -= stack[sp];

    // Sediment
    // Total Sediment Moved is water * fillLevel
    auto sedimentAmount = sedStack[sp];
    m_vv4WaterMap[x].y += sedimentAmount;

    stack[sp] = 0;
    sedStack[sp] = 0;
}

// {printf("TEST: WaterMovement %f\n",fabs(m_vv4WaterMap[x].z));}
// if (fabs(m_vv4WaterMap[x].z) > 0) {printf("WARN: WaterMovement %f\n",m_vv4WaterMap[x].z);}
// // Floating Sediment 
// If waterMoving is == 0
//if(abs(m_vv4WaterMap[x].z) < FLT_EPSILON)
if(true)
{
    // Deposit
    pHeight[x] += m_fDeposition * m_vv4WaterMap[x].y;
    m_vv4WaterMap[x].y -= m_fDeposition * m_vv4WaterMap[x].y;
}



// We're done with Combining

// Water Loss due to evaporation is given by
// -K*W
// Can be written as w1 = w0 * (1-K)
auto evaporationLevel = m_fEvaporation * m_vv4WaterMap[x].x;
m_vv4WaterMap[x].x -= evaporationLevel;

if(m_vv4WaterMap[x].x < 0.00000625f) { m_vv4WaterMap[x].x = 0; }
m_vv4WaterMap[x].x = std::max(m_vv4WaterMap[x].x, 0.f);
m_vv4WaterMap[x].y = std::max(m_vv4WaterMap[x].y, 0.f);

// // More Sediment
// auto sedCapacity = m_fSedimentCapacity * m_vv4WaterMap[x].x;
// //if (x == 0) {printf("%f\n", sedCapacity);}
// if(m_vv4WaterMap[x].y >= sedCapacity)
// {
//     // Deposit everything that is over cap
//     auto deltaS = m_fDeposition * (m_vv4WaterMap[x].y - sedCapacity);
//     pHeight[x] += deltaS;
//     m_vv4WaterMap[x].y -= deltaS;
// }
// else if(m_vv4WaterMap[x].z >= FLT_EPSILON)
// {
//     // Pick up the sediment
//     float rngMod = 1;// - 0.1 * (double(uint64_t(6364136223846793005 * GetWorldXY(x, uWidth) + 1442695040888963407)) / double(UINT64_MAX));

//     //printf("%f\n", rngMod);

//     auto deltaS = m_fSoilSoftness * (sedCapacity - m_vv4WaterMap[x].y) * rngMod;
//     m_vv4WaterMap[x].y += deltaS;
//     pHeight[x] -= deltaS;
// }

// Handle evaporation alone

auto sedCapacity = m_fSedimentCapacity * m_vv4WaterMap[x].x;
if(m_vv4WaterMap[x].y >= sedCapacity)
{
    // Deposit everything that is over cap
    auto deltaS = m_fDeposition * (m_vv4WaterMap[x].y - sedCapacity);
    pHeight[x] += deltaS;
    m_vv4WaterMap[x].y -= deltaS;
}
// If we aren't over the limit, are we under it?
else if(fabs(m_vv4WaterMap[x].z) >= FLT_EPSILON)
{
    // Pick up the sediment
    //float rngMod = 1 - 0.1 * (double(uint64_t(6364136223846793005 * GetWorldXYS(x, uWidth, s) + 1442695040888963407)) / double(UINT64_MAX));

    //printf("%f\n", rngMod);

    auto deltaS = m_fSoilSoftness * (1-std::pow(pHeight[x],2)) * (sedCapacity - m_vv4WaterMap[x].y);// * rngMod;
    //deltaS = std::max(0.001f, sedCapacity);
    m_vv4WaterMap[x].y += deltaS;
    pHeight[x] -= deltaS;
}

// Reset the delayed amount
m_vv4WaterMap[x].z = 0;
m_vv4WaterMap[x].w = 0;
 */