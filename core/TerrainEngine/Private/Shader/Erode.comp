#version 450
//#extension GL_ARB_seperate_shader_objects : enable
#extension GL_EXT_control_flow_attributes : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct InfoBuffer
{
    uint uWidth;
    uint uHeight;
    float fEvaporationRate;
    float fDepositionRate;
    float fSoilSoftness;
    float fRainCoeff;
    float fSedimentCapacity;
    float fWaterLevel;
};

struct FHydFloatCombiner
{
    float values[8];
};

layout(std430, binding = 0) buffer hbuf
{
    float heightMap[];
};

layout(std430, binding = 1) buffer wbuf
{
    FHydFloatCombiner waterMap[];
};

layout(std430, binding = 2) buffer sbuf
{
    FHydFloatCombiner sedimentMap[];
};

layout(std430, binding = 3) readonly buffer waterlv
{
   float waterLevel[];
};

layout(std430, binding = 4) readonly buffer sedlv
{
   float sedimentLevel[];
};

layout(std430, binding = 5) writeonly buffer delaywaterlv
{
   float delayedWaterLevel[];
};

layout(std430, binding = 6) writeonly buffer delaysedlv
{
   float delayedSedimentLevel[];
};

layout(std430, binding = 7) readonly buffer info
{
   InfoBuffer shaderInfo;
};


/**
 * First Pass
 */
void main()
{
    if(gl_GlobalInvocationID.x >= shaderInfo.uWidth || gl_GlobalInvocationID.y >= shaderInfo.uHeight)
    {
        return;
    }

    uint gIdx = gl_GlobalInvocationID.y * shaderInfo.uWidth + gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    uint x = gl_GlobalInvocationID.x;
    int index = 0;
    int yMod = 0;
    int xMod = 0;
    int yReal = 0;
    int xReal = 0;

    // Useful Vars
    //float maximalWaterToMove = ;
    float terrainHeight = heightMap[gIdx];
    float waterHeight = terrainHeight + waterLevel[gIdx];

    // Create stack array of valid neighbours
    FHydFloatCombiner stLowerNeighbours;
    stLowerNeighbours.values[0] = 0;
    stLowerNeighbours.values[1] = 0;
    stLowerNeighbours.values[2] = 0;
    stLowerNeighbours.values[3] = 0;
    stLowerNeighbours.values[4] = 0;
    stLowerNeighbours.values[5] = 0;
    stLowerNeighbours.values[6] = 0;
    stLowerNeighbours.values[7] = 0;


    // Heights
    float sumHeightDifferent = 0;
    int nLowerNeighbours = 0;

    [[unroll]]
    for(int n = 0; n < 8; ++n)
    {
        index = n + (n > 3 ? 1 : 0);
        
        yMod = (index / 3) - 1;
        xMod = (index % 3) - 1;
        
        yReal = int(y) + yMod;
        xReal = int(x) + xMod;

        float checkedWaterLevel = (yReal < 0 || yReal >= shaderInfo.uHeight || xReal < 0 || xReal >= shaderInfo.uWidth) ? 0 : heightMap[yReal * shaderInfo.uWidth + xReal] + waterLevel[yReal * shaderInfo.uWidth + xReal];
        float deltaLevel = (checkedWaterLevel >= waterHeight) ? 0 : (waterHeight - checkedWaterLevel);

        // We have water to move
        sumHeightDifferent += deltaLevel;
        nLowerNeighbours += deltaLevel > 0 ? 1 : 0;
        stLowerNeighbours.values[n] = deltaLevel;
    }

    [[unroll]]
    for(int n = 0; n < 8; ++n)
    {
        // Is Valid Neighbour?
        //if(stLowerNeighbours.values[n] == 0){ continue; }

        // Calculate the proportional share of the water
        index = n + (n > 3 ? 1 : 0);

        yMod = (index / 3) - 1;
        xMod = (index % 3) - 1;

        yReal = int(y) + yMod;
        xReal = int(x) + xMod;

        // // Changed nNeighbours to heightDelta
        // if (
        //     yReal < 0 || 
        //     yReal >= shaderInfo.uHeight || 
        //     xReal < 0 || 
        //     xReal >= shaderInfo.uWidth ||
        //     nLowerNeighbours == 0 ||
        //     sumHeightDifferent == 0
        //     )
        // {
        //     waterMap[yReal * shaderInfo.uWidth + xReal].values[n] = 0;
        //     sedimentMap[yReal * shaderInfo.uWidth + xReal].values[n] = 0;
        //     continue;
        // }

        bool mixVal = (
            yReal < 0 || 
            yReal >= shaderInfo.uHeight || 
            xReal < 0 || 
            xReal >= shaderInfo.uWidth ||
            nLowerNeighbours == 0 ||
            sumHeightDifferent == 0
            );

        float ratio = mixVal ? 0 : (stLowerNeighbours.values[n] / sumHeightDifferent) / (nLowerNeighbours + 1);
        float waterToMoveHere = waterLevel[gIdx] * ratio;
        float sedToMoveHere = sedimentLevel[gIdx] * ratio * 0.85f;

        // Sediment To Move is function of the sediment in the water


        // Change Water Level at this pixel
        delayedWaterLevel[gIdx] += waterToMoveHere;
        delayedSedimentLevel[gIdx] += sedToMoveHere;

        waterMap[yReal * shaderInfo.uWidth + xReal].values[n] = waterToMoveHere;
        sedimentMap[yReal * shaderInfo.uWidth + xReal].values[n] = sedToMoveHere;
    }
}


/*

#ifdef NDEBUG
        #pragma omp parallel for
        #endif
        for(uint32_t y = 0; y < uHeight; ++y)
        {
            auto my = y * uWidth;

            for(uint32_t x = 0; x < uWidth; ++x)
            {
                // What is the most water we can move?
                auto maximalWaterToMove = m_vv4WaterMap[my+x].x;
                auto terrainHeight = pHeight[my+x];
                auto waterLevel = terrainHeight + maximalWaterToMove;

                // Create stack array of valid neighbours
                FHydFloatCombiner stLowerNeighbours{};

                // Heights
                float sumHeightDifferent = 0;
                auto nLowerNeighbours = 0;

                for(uint32_t n = 0; n < 8; ++n)
                {
                    auto ln = n;
                    if(ln > 3) { ++ln; }

                    int32_t yMod = ln / 3 - 1;
                    int32_t xMod = ln % 3 - 1;
                    
                    //printf("%d means y:%d x:%d\n", n, yMod, xMod);
                    auto yReal = y + yMod;
                    auto xReal = x + xMod;

                    // Bounds
                    if (yReal < 0 || yReal >= uHeight || xReal < 0 || xReal >= uWidth)
                    {
                        continue;
                    }

                    
                    auto checkedWaterLevel = pHeight[yReal * uWidth + xReal] + m_vv4WaterMap[yReal * uWidth + xReal].x;
                    if (checkedWaterLevel >= waterLevel) { continue; }

                    // We have water to move
                    sumHeightDifferent += (waterLevel - checkedWaterLevel);
                    ++nLowerNeighbours;
                    stLowerNeighbours.values[n] = waterLevel - checkedWaterLevel;
                }

                // Is there anything to do?
                //if(nLowerNeighbours == 0) { continue; }

                // Calc DeltaW
                // Or don't
                auto deltaW = maximalWaterToMove;//std::min(maximalWaterToMove, sumHeightDifferent / nLowerNeighbours);
                //auto sedimentSaturation = m_vv4WaterMap[my+x].y / m_vv4WaterMap[my+x].x;
                auto sedimentHere = m_vv4WaterMap[my+x].y;

                for(uint32_t n = 0; n < 8; ++n)
                {
                    // Is Valid Neighbour?
                    if(stLowerNeighbours.values[n] == 0){ continue; }

                    // Calculate the proportional share of the water
                    auto ln = n;
                    if(ln > 3) { ++ln; }

                    int32_t yMod = ln / 3 - 1;
                    int32_t xMod = ln % 3 - 1;
                    
                    auto yReal = y + yMod;
                    auto xReal = x + xMod;

                    // Changed nNeighbours to heightDelta

                    auto ratio = (stLowerNeighbours.values[n] / sumHeightDifferent) / (nLowerNeighbours + 1);
                    auto waterToMoveHere = deltaW * ratio;
                    auto sedToMoveHere = sedimentHere * ratio;// * 0.85f;

                    // Sediment To Move is function of the sediment in the water


                    // Change Water Level at this pixel
                    m_vv4WaterMap[my+x].z += waterToMoveHere * m_fWorldVerticalScale;
                    m_vv4WaterMap[my+x].w += sedToMoveHere;

                    m_vstWaterCombiner[yReal * uWidth + xReal].values[n] = waterToMoveHere * m_fWorldVerticalScale;
                    m_vstSedimentCombiner[yReal * uWidth + xReal].values[n] = sedToMoveHere;
                }
            }
        }

*/

/**
#version 450
//#extension GL_ARB_seperate_shader_objects : enable

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;*/
// void main()
// {
//     if(gl_GlobalInvocationID.x >= shaderInfo.uWidth || gl_GlobalInvocationID.y >= shaderInfo.uHeight)
//     {
//         return;
//     }

//     uint gIdx = gl_GlobalInvocationID.y * shaderInfo.uWidth + gl_GlobalInvocationID.x;

//     uint y = gl_GlobalInvocationID.y;
//     uint x = gl_GlobalInvocationID.x;
//     int index = 0;
//     int yMod = 0;
//     int xMod = 0;
//     int yReal = 0;
//     int xReal = 0;

//     // Useful Vars
//     //float maximalWaterToMove = ;
//     float terrainHeight = heightMap[gIdx];
//     float waterHeight = terrainHeight + waterLevel[gIdx];

//     // Create stack array of valid neighbours
//     FHydFloatCombiner stLowerNeighbours;
//     stLowerNeighbours.values[0] = 0;
//     stLowerNeighbours.values[1] = 0;
//     stLowerNeighbours.values[2] = 0;
//     stLowerNeighbours.values[3] = 0;
//     stLowerNeighbours.values[4] = 0;
//     stLowerNeighbours.values[5] = 0;
//     stLowerNeighbours.values[6] = 0;
//     stLowerNeighbours.values[7] = 0;


//     // Heights
//     float sumHeightDifferent = 0;
//     int nLowerNeighbours = 0;
//     float neighbourHeights = waterHeight;

//     for(int n = 0; n < 8; ++n)
//     {
//         index = n + int(n > 3);
//         //stLowerNeighbours.values[n] = 0;
//         //if(index > 3) { ++index; }

//         yMod = (index / 3) - 1;
//         xMod = (index % 3) - 1;
        
//         //printf("%d means y:%d x:%d\n", n, yMod, xMod);
//         yReal = int(y) + yMod;
//         xReal = int(x) + xMod;

//         // Bounds
//         if (yReal < 0 || yReal >= shaderInfo.uHeight || xReal < 0 || xReal >= shaderInfo.uWidth)
//         {
//             continue;
//         }
        
//         float checkedWaterLevel = heightMap[yReal * shaderInfo.uWidth + xReal] + waterLevel[yReal * shaderInfo.uWidth + xReal];
//         if (checkedWaterLevel >= waterHeight) { continue; }

//         // We have water to move
//         neighbourHeights += checkedWaterLevel;
//         sumHeightDifferent += (waterHeight - checkedWaterLevel);
//         ++nLowerNeighbours;
//         stLowerNeighbours.values[n] = waterHeight - checkedWaterLevel;
//     }
    
//     float averageHeightLowerNeighbour = neighbourHeights / (nLowerNeighbours + 1);
//     float waterToMove = min(waterLevel[gIdx], waterHeight - averageHeightLowerNeighbour);

//     //delayedWaterLevel[gIdx] = nLowerNeighbours / 9.f;//averageHeightLowerNeighbour;//neighbourHeights / 9;

//     for(int n = 0; n < 8; ++n)
//     {
//         // Is Valid Neighbour?
//         //if(stLowerNeighbours.values[n] == 0){ continue; }

//         // Calculate the proportional share of the water
//         index = n + int(n>3);
//         //if(index > 3) { ++index; }

//         yMod = (index / 3) - 1;
//         xMod = (index % 3) - 1;

//         yReal = int(y) + yMod;
//         xReal = int(x) + xMod;

//         // Changed nNeighbours to heightDelta
//         if (
//             yReal < 0 || 
//             yReal >= shaderInfo.uHeight || 
//             xReal < 0 || 
//             xReal >= shaderInfo.uWidth ||
//             nLowerNeighbours == 0 ||
//             sumHeightDifferent == 0 ||
//             waterToMove <= 0
//             )
//         {
//             waterMap[yReal * shaderInfo.uWidth + xReal].values[n] = 0;
//             sedimentMap[yReal * shaderInfo.uWidth + xReal].values[n] = 0;
//             continue;
//         }

//         float ratio = (stLowerNeighbours.values[n] / sumHeightDifferent);// / (nLowerNeighbours + 1);
//         float waterToMoveHere = waterToMove * ratio * 0.5f;
//         //float waterToMoveHere = waterLevel[gIdx] * ratio;// * 0.5f;

//         float waterSat = sedimentLevel[gIdx] / waterLevel[gIdx];
//         float sedToMoveHere = waterToMoveHere * waterSat *  0.85f;
//         //float sedToMoveHere = sedimentLevel[gIdx] * ratio * 0.85f;

//         // Sediment To Move is function of the sediment in the water


//         // Change Water Level at this pixel
//         delayedWaterLevel[gIdx] += waterToMoveHere;
//         delayedSedimentLevel[gIdx] += sedToMoveHere;

//         waterMap[yReal * shaderInfo.uWidth + xReal].values[n] = waterToMoveHere;
//         sedimentMap[yReal * shaderInfo.uWidth + xReal].values[n] = sedToMoveHere;
//     }
// }
